import os
import time
import psycopg2
from psycopg2.extras import RealDictCursor
import telebot
from telebot import types

# ====== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ======
TOKEN = os.getenv("TOKEN")
CHANNEL = os.getenv("CHANNEL", "@FlowersMindale")

bot = telebot.TeleBot(TOKEN)

DB_HOST = os.getenv("DB_HOST", "db")
DB_PORT = int(os.getenv("DB_PORT", 5432))
DB_NAME = os.getenv("DB_NAME", "botdb")
DB_USER = os.getenv("DB_USER", "botuser")
DB_PASS = os.getenv("DB_PASS", "botpass")

# ====== –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —Å retry ======
def get_connection():
    while True:
        try:
            conn = psycopg2.connect(
                host=DB_HOST,
                port=DB_PORT,
                database=DB_NAME,
                user=DB_USER,
                password=DB_PASS,
                cursor_factory=RealDictCursor
            )
            return conn
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ: {e}. –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
            time.sleep(5)

conn = get_connection()
cursor = conn.cursor()

# ====== –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã ======
cursor.execute("""
CREATE TABLE IF NOT EXISTS users (
    id BIGINT PRIMARY KEY,
    username TEXT,
    invited_by BIGINT,
    invites_count INT DEFAULT 0
);
""")
conn.commit()

# ====== –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ ======
def is_subscribed(user_id):
    try:
        chat_member = bot.get_chat_member(CHANNEL, user_id)
        return chat_member.status in ["member", "creator", "administrator", "owner"]
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return False

# ====== /start ======
@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.from_user.id
    username = message.from_user.username or "no_username"

    args = message.text.split()
    invited_by = int(args[1]) if len(args) > 1 else None

    cursor.execute("SELECT * FROM users WHERE id = %s", (user_id,))
    user = cursor.fetchone()

    if not user:
        cursor.execute(
            "INSERT INTO users (id, username, invited_by) VALUES (%s, %s, %s)",
            (user_id, username, invited_by)
        )
        if invited_by:
            cursor.execute(
                "UPDATE users SET invites_count = invites_count + 1 WHERE id = %s",
                (invited_by,)
            )
        conn.commit()

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
    btn_link = types.KeyboardButton("üì© –ü–æ–ª—É—á–∏—Ç—å –º–æ—é —Å—Å—ã–ª–∫—É")
    btn_stats = types.KeyboardButton("üë• –ú–æ–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è")
    keyboard.add(btn_link, btn_stats)

    bot.send_message(
        user_id,
        f"üéâ –ü—Ä–∏–≤–µ—Ç, {username}!\n\n"
        f"–£—á–∞—Å—Ç–≤—É–π –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ üéÅ\n"
        f"1. –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª {CHANNEL}\n"
        f"2. –ü–æ–ª—É—á–∏ —É–Ω–∏–∫–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è\n"
        f"3. –î–µ–ª–∏—Å—å –µ–π —Å –¥—Ä—É–∑—å—è–º–∏, —Ä–∞–∑–º–µ—â–∞–π –≤ –∏—Å—Ç–æ—Ä–∏—è—Ö, –≥—Ä—É–ø–ø–∞—Ö –∏ –≤—ã–∏–≥—Ä—ã–≤–∞–π –ø—Ä–∏–∑—ã!\n\n"
        f"10 —á–µ–ª–æ–≤–µ–∫, –ö—Ç–æ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –¥—Ä—É–∑–µ–π ‚Äî –ø–æ–ª—É—á–∏—Ç –º–∏—Å—Ç Victoria`s Secret –ø–æ–¥–∞—Ä–æ–∫! üèÜ\n"
        f"–ì–ª–∞–≤–Ω—ã–π –ø—Ä–∏–∑ - –∫—É–ø–æ–Ω 3000 —Ä—É–±–ª–µ–π –Ω–∞ –±—É–∫–µ—Ç —Ü–≤–µ—Ç–æ–≤ –æ—Ç Mindale\n",
        reply_markup=keyboard
    )

# ====== –ö–Ω–æ–ø–∫–∞: –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É ======
@bot.message_handler(func=lambda message: message.text == "üì© –ü–æ–ª—É—á–∏—Ç—å –º–æ—é —Å—Å—ã–ª–∫—É")
def get_link(message):
    user_id = message.from_user.id

    if is_subscribed(user_id):
        bot.send_message(
            user_id,
            f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –¢—ã –ø–æ–¥–ø–∏—Å–∞–Ω.\n"
            f"–í–æ—Ç —Ç–≤–æ—è —É–Ω–∏–∫–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π:\n"
            f"https://t.me/{bot.get_me().username}?start={user_id}"
        )
    else:
        markup_inline = types.InlineKeyboardMarkup()
        btn_subscribe = types.InlineKeyboardButton("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=f"https://t.me/{CHANNEL[1:]}")
        markup_inline.add(btn_subscribe)
        bot.send_message(
            user_id,
            "‚ùå –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É, —Å–Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª:",
            reply_markup=markup_inline
        )

# ====== –ö–Ω–æ–ø–∫–∞: —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ======
@bot.message_handler(func=lambda message: message.text == "üë• –ú–æ–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è")
def show_stats(message):
    user_id = message.from_user.id
    cursor.execute("SELECT invites_count FROM users WHERE id = %s", (user_id,))
    row = cursor.fetchone()
    count = row['invites_count'] if row else 0
    bot.send_message(user_id, f"üìä –¢—ã –ø—Ä–∏–≥–ª–∞—Å–∏–ª {count} —á–µ–ª–æ–≤–µ–∫(–∞).")

# ====== –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ======
bot.infinity_polling()
